@using RentSmart.Web.ViewModels.Properties.ViewModels
@model PropertyDetailsViewModel
@{
    ViewData["Title"] = "Details";
    var available = Model.IsAvailable ? "Available" : "Occupied";
}
@await Component.InvokeAsync("GetCountsComponent")

<div class="container mt-4 mb-4 row">
     <h3 class="text-center">@ViewData["Title"]</h3>
     <hr/>
<div id="carouselExample" class="carousel slide col-md-6 offset-md-1">
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img src="@Model.ImagesUrls.FirstOrDefault()" class="d-block w-100" alt="property-image" style="object-fit: cover; height: 500px;">
    </div>
        @for (int i = 1; i < @Model.ImagesUrls.Count(); i++)
            {
                <div class="carousel-item">
                <img src="@Model.ImagesUrls[i]" class="d-block w-100" style="object-fit: cover; height: 500px;">
                </div> 
            }      
  </div>
  <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
</div>

<ul class="list-group col-md-4 mb-4">
  <li class="list-group-item bg-primary text-center text-white">Property Info</li>
  <li class="list-group-item text-danger">
      <span class="data-like" data-property-id="@Model.Id"><i class="fa-solid fa-heart"></i></span>
      <span class="data-dislike" data-property-id="@Model.Id"><i class="fa-regular fa-heart"></i></span>
      <span id="totalLikes"> @Model.TotalLikes</span>
      <span> Total Likes</span>
  </li>  
  <li class="list-group-item">
     @foreach (var tag in Model.TagsTagNames)
            {
              <div class="badge bg-primary me-2">@tag</div>
            }
        </li>
  <li class="list-group-item"><i class="fa-solid fa-house"></i>  @Model.PropertyTypeName</li>
  <li class="list-group-item"><i class="fa-solid fa-location-dot"></i>  @Model.CityName, @Model.DistrictName</li>
  <li class="list-group-item"><i class="fa-solid fa-up-right-and-down-left-from-center"></i>  @Model.Size sq.m, @Model.Floor floor</li>
  <li class="list-group-item text-danger"><i class="fa-solid fa-star"></i>  Average Rating: @Model.AverageRating</li>
  <li class="list-group-item"><i class="fa-solid fa-user"></i>  Manager: @Model.ManagerName</li>
  <li class="list-group-item"><i class="fa-solid fa-user"></i>  Owner: @Model.OwnerName</li>
  <li class="list-group-item @(Model.IsAvailable ? "text-success" : "text-danger")"><i class="fa-solid fa-check"></i> Status: @available</li>
            
    @if (Model.OriginalUrl!=null)
        {
           <li class="list-group-item"><i class="fa-solid fa-arrow-up-right-from-square"></i>  <a href="Model.OriginalUrl" target="_blank">imoti.info</a></li> 
        }
<form method="post" id="antiForgeryForm">@Html.AntiForgeryToken()</form>

@if (User.Identity.IsAuthenticated)
{
    <li class="list-group-item">
        <input type="date" 
            data-property-id="@Model.Id"
            min="@DateTime.UtcNow.ToString("yyyy-MM-dd")" 
            max="@DateTime.UtcNow.AddDays(20).ToString("yyyy-MM-dd")" 
            id="appointmentDate" class="form-control mt-3"/>

        <select id="appointmentTime" class="form-select mb-3">
            <option value="" disabled selected>Select a time</option>
        </select>
        <button type="button" id="makeAppointment" class="btn btn-primary btn-sm">Make Appointment</button>
    <div id="appointmentMessage" class="mt-3 text-danger"></div>
</li>
}

    </ul>
    @if (Model.Description !=null)
    {
        <p class="text-center"><strong>Description</strong>: @Model.Description</p>
    }
</div>




@section Scripts{
    <script>
        $(document).ready(function () {
    $('.data-like').on('click', function () {
        var property = $(this).data('property-id');
        liked(property);
    });

    function liked(property) {
        var data = { PropertyId: property, IsLiked: true };
        var antiForgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();

        $.ajax({
            type: "POST",
            url: "/api/Like",
            data: JSON.stringify(data),
            headers: {
                'X-CSRF-TOKEN': antiForgeryToken
            },
            contentType: 'application/json',
            success: function (data) {
                $('#totalLikes').html(data.totalLikes);
            }
        });
    }
});
    </script>

    <script>
        $(document).ready(function () {
        $('.data-dislike').on('click', function () {
        var property = $(this).data('property-id');
        liked(property);
    });

    function liked(property) {
        var data = { PropertyId: property, IsLiked: false };
        var antiForgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();

        $.ajax({
            type: "POST",
            url: "/api/Like",
            data: JSON.stringify(data),
            headers: {
                'X-CSRF-TOKEN': antiForgeryToken
            },
            contentType: 'application/json',
            success: function (data) {
                $('#totalLikes').html(data.totalLikes);
            }
        });
    }
});
    </script>

<script>
$(document).ready(function () {
    $('#appointmentDate, #appointmentTime').on('change', function () {
        $('#appointmentMessage').text('');
    });

    $('#appointmentDate').on('change', function () {
        var date = $(this).val();
        var property = $(this).data('property-id');

        if (date && property) {
            var antiForgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();
            takedate(property, date, antiForgeryToken);
        }
    });

    $('#makeAppointment').on('click', function () {
        var time = $('#appointmentTime').val();
        var date = $('#appointmentDate').val();
        var property = $('#appointmentDate').data('property-id');
        var antiForgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();

        if (time && date && property) {
            makeAppointment(property, date, time, antiForgeryToken);
        } 
    });
});

function takedate(property, date, antiForgeryToken) {
    var url = "/api/appointment/GetAvailableHours?PropertyId=" + property + "&DateChosen=" + date;

    $.ajax({
        type: "GET",
        url: url,
        headers: {
            'X-CSRF-TOKEN': antiForgeryToken
        },
        success: function (data) {
            $('#appointmentTime').empty().append('<option value="" disabled selected>Select a time</option>');

            data.forEach(function (hour) {
                $('#appointmentTime').append('<option value="' + hour + '">' + hour + '</option>');
            });
        }
    });
}

function makeAppointment(property, date, time, antiForgeryToken) {
    var appointmentData = {
        PropertyId: property,
        Date: date,
        Time: time
    };

    $.ajax({
        type: "POST",
        url: "/api/appointment", 
        data: JSON.stringify(appointmentData),
        headers: {
            'X-CSRF-TOKEN': antiForgeryToken
        },
        contentType: 'application/json',
        success: function (data) {
            $('#appointmentMessage')
                .text("Appointment successfully made!")
        }
    });
}
</script>

}

